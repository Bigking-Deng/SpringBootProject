546，1000题：
三维dp，难度极大，状态方程和代码都很难写。

312，664题：（二维dp的经典使用，只是状态方程比较难推导出来）
二维dp，关键在于首先找到状态转移方程，其次定好怎样先计算小的集合再计算大的集合，有两种方式：
1.首尾分别为i,j。令i从总集合`尾部向头移动：i:len->0  j从i向尾部移动：j:i->len,以此规则套两个for循环
2.定义一个步长step:1->len-1, i从0->len-step, j=i+step;移动i遍历整个集合，j则是i加上固定长度得到尾部，最外层循环步长，内循环i，这样可以
先得到所有长度较小的集合存入dp数组，大的集合计算的时候就可以用小集合的结果了。
以上两种方法可以保证计算当前子集的dp结果时的状态方程引用的更小子集的结果一定已经更早被计算并保存了起来！

