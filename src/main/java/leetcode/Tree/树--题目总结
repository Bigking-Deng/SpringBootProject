刷题总结：

树：


*95，96题：
求解给定节点的BST的所有可能的组合结构
都可以用BST中序遍历是一个单增数组的特性，选取数组中其中某个值为root节点，值左边子数组为左子树，右边为右子树不断递归，其中95题为了优化还可以使用动态规划去解，96也可不过较复杂一些

*105, 106题
经典利用二叉树的先序和中序遍历得到的数组特点递归构建树，106可以将后序遍历形成的数组看成先序遍历形成的数组的翻转！


！记住先序遍历和后序遍历的关系：先序：root,左子树，右子树；
   非常重要：               后序：左子树，右子树，root；翻转一下：root,右子树，左子树；
                          相当于如果先序遍历的时候遵循先右后左的模式，得到的序列是后边遍历序列的翻转！同理先右后左的后序遍历：右子树，左子树，root；翻转一下得到先序遍历的序列！
*114题：
关键点在于首先用全局变量总是记录着遍历的上一个节点，然后让上一个节点的right指向现在的节点，问题在于先序遍历的时候总要遍历完子树后回溯到父节点再去右边的子树，
但是父节点已经遍历过然后他的右指针已经连向了下一个节点，原本树的结构在变成链表的过程中被破坏！
这里有两种方法：
1.由于先序遍历每遍历一个节点都要讲此节点的右指针改变从而丢失信息，利用先序后序遍历的翻转相似性，先右后左的后序遍历可以得到先序序列的翻转，
后序遍历最后再遍历父节点，不会在之前遍历处理subtree的时候丢失父节点的另一个subtree连接信息！
2.仍然遵循先序遍历，但每当进入左子树遍历下一个节点就会改变父节点的right指针，所以在父节点进入左子树前将左右指针互换，然后再递归遍历左子树（互换前的右子树）可防止遗漏信息
注意交换是在当前节点的第一个递归里完成（先序遍历遍历下一个节点在第一个递归里）

*116， 117， 199题
都是用BFS套公式简单实现

297，449题
序列化和反序列化树：对于BST树，BST中序遍历得到的是一个单增数组，无法从此反序列化，而先序和后序遍历可互相转化，故选择先序遍历去序列化，反序列化时利用BST左子树比root小，可在确定第一个数字为
root后遍历数组到第一个比root大的下标即为左右子树序列的分界点，然后递归恢复。小技巧：添加分隔符后可用string.split产生字符数组。
对于BT树，没有BST的特性

112，113， 147， 124， 129，687题
本质都是用DFS递归去处理路径问题，每次递归可以携带一些参数。除了一些简单的DFS一次递归外。有些题需要两次递归：
两种思路：两次递归具体指有些满足题目的路径并不经过以根节点，它可能经过其他子节点，所以我们把每一个子节点看成为根的子树，对每个子树应用处理方法找到满足条件的路径
这样的话我们将不一定经过根节点的路径问题转化成一定经过不同子树的根节点的问题（类似于拆分成子问题）而对每个子节点运用同样的算法必须借助树的遍历从而访问每个子节点！
借助树的遍历过程中对每个节点应用相同的算法（父节点的算法拆成子节点的算法问题）同时辅助以全局变量或者hashmap来记录一些重要特征信息以便于不停比较更新！
典型的递归！先解决树最下面叶子结点和空节点的算法结果然后逐层往上返回得到父节点的结果。。。